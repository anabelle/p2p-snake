name: Deploy Frontend and Server # Name for the Deploy workflow (will appear on deploy badge)

on:
  workflow_run:
    workflows: ['E2E Tests'] # Trigger after the "E2E Tests" workflow completes
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run deployment if the triggering workflow was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: production

    steps:
      - name: Checkout code
        # Checks out the commit that triggered the 'CI Tests' workflow
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 1 # Fetch only the latest commit

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend for deployment
        run: npm run build

      - name: Build server for deployment
        run: |
          # Build the server TypeScript files
          npm run build:server
          
          # Create server package.json with dependencies
          cat > dist-server/package.json << 'EOL'
          {
            "name": "snake-game-server",
            "version": "1.0.0",
            "description": "Multiplayer Snake Game Server",
            "main": "server/cpanel-entry.js",
            "engines": {
              "node": "18.x"
            },
            "scripts": {
              "start": "node server/cpanel-entry.js",
              "install-deps": "npm install --production",
              "postinstall": "echo 'Dependencies installed successfully'"
            },
            "dependencies": {
              "socket.io": "^4.8.1",
              "http": "^0.0.1-security",
              "uuid": "^9.0.1"
            },
            "cPanel": {
              "type": "nodejs",
              "entrypoint": "server/cpanel-entry.js",
              "environment": {
                "NODE_ENV": "production"
              }
            }
          }
          EOL
          
          # Copy cPanel configuration files to the dist-server directory
          cp server/cpanel-entry.js dist-server/server/
          cp server/.htaccess dist-server/server/
          cp server/cpanel.json dist-server/server/
          cp server/.user.ini dist-server/server/
          
          # Create backend directory and copy backend .htaccess
          mkdir -p dist-server/server/backend
          cp server/backend/.htaccess dist-server/server/backend/
          
          # Create .cpanel.yml for deployment
          cat > dist-server/server/.cpanel.yml << 'EOL'
          ---
          deployment:
            tasks:
              - export DEPLOYPATH=/home/username/public_html/server/
              - /bin/cp -R server/package.json $DEPLOYPATH
              - /bin/cp -R server/package-lock.json $DEPLOYPATH
              - /bin/cp -R server/npm-shrinkwrap.json $DEPLOYPATH
              - /bin/cp -R server/.npmrc $DEPLOYPATH
              - /bin/cp -R server/cpanel-entry.js $DEPLOYPATH
              - /bin/cp -R server/index.js $DEPLOYPATH
              - /bin/cp -R server/httpServer.js $DEPLOYPATH
              - /bin/cp -R server/gameManager.js $DEPLOYPATH
              - /bin/cp -R server/socketHandlers.js $DEPLOYPATH
              - /bin/cp -R server/backend $DEPLOYPATH
              - /bin/cp -R src $DEPLOYPATH
              - cd $DEPLOYPATH && npm install --production
          EOL
          
          # Create .npmrc file for npm configuration
          cat > dist-server/server/.npmrc << 'EOL'
          save-exact=true
          package-lock=true
          fund=false
          audit=false
          engine-strict=true
          legacy-peer-deps=true
          EOL
          
          # Create install.sh script in the server directory
          cat > dist-server/server/install.sh << 'EOL'
          #!/bin/bash
          echo "Installing dependencies for Snake Game Server..."
          npm install --production
          echo "Dependencies installed successfully!"
          EOL
          
          chmod +x dist-server/server/install.sh
          
          # Create README.md for server deployment
          cat > dist-server/server/README.md << 'EOL'
          # Snake Game Server

          ## cPanel Deployment Instructions

          This directory contains the compiled server code for the Snake Game multiplayer backend.

          ### Manual Installation

          1. After uploading the files to your cPanel server, navigate to the server directory
          2. Run the install script:
          ```
          chmod +x install.sh
          ./install.sh
          ```

          3. Configure the application in cPanel's Node.js App Manager:
             - Application root: Path to this directory
             - Application URL: Your domain or subdomain
             - Application startup file: `cpanel-entry.js`
             - Node.js version: 18.x
             - Environment mode: Production
             - Environment variables:
               - PORT: The port assigned by your cPanel provider (usually in the 8000-9000 range)

          ### Files Overview

          - `cpanel-entry.js`: The main entry point for the Node.js application
          - `index.js`: The compiled server logic
          - `package.json` & `package-lock.json`: Define dependencies for the server
          - `.htaccess`: Apache configuration for the Node.js app
          - `cpanel.json`: cPanel-specific configuration
          - `install.sh`: Helper script to install dependencies
          - `backend/.htaccess`: Cloudlinux Passenger configuration for the /backend endpoint

          ### Troubleshooting

          If the server fails to start:

          1. Check the Node.js app logs in cPanel
          2. Ensure all dependencies were installed correctly 
          3. Verify the PORT environment variable is set correctly
          EOL

      - name: Install lftp
        run: |
          # Disable man-db updates to speed up installation
          sudo mkdir -p /etc/dpkg/dpkg.cfg.d/
          echo 'path-exclude /usr/share/man/*' | sudo tee /etc/dpkg/dpkg.cfg.d/excludes > /dev/null
          echo 'path-exclude /usr/share/doc/*' | sudo tee -a /etc/dpkg/dpkg.cfg.d/excludes > /dev/null
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends lftp

      - name: Prepare deployment files
        run: |
          # Frontend files
          mkdir -p deploy
          cp -r build/* deploy/
          
          # Server files
          mkdir -p deploy/server
          cp -r dist-server/* deploy/server/

      - name: Deploy via FTP
        env:
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASS: ${{ secrets.FTP_PASS }}
          FTP_HOST: ${{ secrets.FTP_HOST }}
        run: |
          cd deploy
          lftp -e "set ftp:ssl-allow no; set ftp:list-options -a; set dns:order \"AAAA A\"; mirror -RLve --delete --parallel=5 . .; quit" -u $FTP_USER,$FTP_PASS $FTP_HOST
